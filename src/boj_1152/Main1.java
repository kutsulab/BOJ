package boj_1152;

import java.util.Scanner;

	/* ===================================================
	 * BOJ(백준) 7단계 - 문자열
	 * 
	 * <<boj_1152>>
	 *  입력 문장에 속한 단어의 갯수 (풀이 1 : String[] split(String regex))
	 *  https://www.acmicpc.net/problem/1152
	 *  
	 *  영어 대소문자와 공백으로 이루어진 문자열이 주어진다. 이 문자열에는 몇 개의 단어가 있을까?
	 *  이를 구하는 프로그램을 작성하시오. 단, 한 단어가 여러 번 등장하면 등장한 횟수만큼 모두 세어야 한다.
	 *  
	 *  (입력)
	 *   첫 줄에 영어 대소문자와 공백으로 이루어진 문자열이 주어진다. 이 문자열의 길이는 1,000,000을 넘지 않는다.
	 *   단어는 공백 한 개로 구분되며, 공백이 연속해서 나오는 경우는 없다.
	 *   또한 문자열은 공백으로 시작하거나 끝날 수 있다.
	 *  
	 *  (출력)
	 *   첫째 줄에 단어의 개수를 출력한다.
	 * 
	 *  예제 입력1> The Curious Case of Benjamin Button
	 *  예제 출력1> 6
	 *  
	 *  예제 입력2>  The first character is a blank
	 *  예제 출력2> 6
	 *  
	 *  예제 입력3> The last character is a blank 
	 *  예제 출력3> 6
	 *  
	 * ===================================================
	 * 
	 * 필요지식
	 * 
	 *  1. String trim()
	 *  2. String[] split(String regex)
	 *  3. 정규식(Regular Expression)
	 *  4. Escape-Sequence
	 *  
	 * ===================================================
	 * 
	 *  1. String trim()
	 *   - 문자열의 양 끝의 공백을 제거
	 *   
	 * ===================================================
	 * 
	 *  2. String[] split(String regex)
	 *   - 문자열을 지정 정규식의 문자열을 구분자로 하여 쪼갠 뒤, 배열에 저장
	 *   
	 * ===================================================
	 * 
	 *  3. 정규식 (Regular Expression)
	 *   텍스트 데이터 중에서 원하는 조건(패턴, pattern)과 일치하는 문자열을 찾아내기 위해 사용하는 표현양식.
	 *   이 때 큰 따옴표 ""안에서 escape-Sequence '\'을 사용하려면 '\\'와 같이 두 번 사용해야한다.
	 *   
	 *   주요 정규식>
	 *    - .* : 모든 문자열 
	 *    
	 *    - c : c와 일치하는 문자열
	 *    - c. : c로 시작하는 모든 문자열
	 *    - c.* : c로 시작하는 모든 문자열 (기호 포함)
	 *    - c\. : c.과 일치하는 모든 문자열. '.'은 패턴 작성에 사용되므로, 문자로서 사용하려면 escape문자인 '\'을 사용해야함.

	 *    - c\d : c에 이어 숫자가 따라오는 두 자리 문자열
	 *    - c[0-9] : c에 이어 숫자가 따라오는 두 자리 문자열
	 *    
	 *    - c[a-z]* : c로 시작하고 뒤에 소문자 영어만 오는 문자열들
	 *    - c[a-z] : c로 시작하는 두자리 영단어(뒤에는 소문자만 허용)
	 *    - c[a-zA-Z] : c로 시작하는 두자리 영단어 (뒤에 오는 문자는 대소문자 구분 안 함)
	 *    
	 *    - c\w : c로 시작하고 숫자 또는 영어가 뒤에 따라오는 두자리 문자열
	 *    - c[a-zA-Z0-9] : c로 시작하고 뒤에 숫자 또는 영어가 뒤에 따라오는 두자리 문자열
	 *    
	 *    - c.*t : c로 시작하고 t로 끝나는 모든 문자열
	 *    - [b|c].* : b 또는 c로 시작하는 모든 문자열
	 *    
	 *    - ".*a.*" : a를 포함하는 모든 문자열. 여기서 '.*'는 0개 또는 그 이상의 문자를 포함해야함.
	 *    - ".*a.+" : a를 포함하는 모든 문자열. 여기서 '.+'는 1개 또는 그 이상의 문자를 포함해야함. 즉 마지막에 a로 끝나는 단어는 포함되지 않는다.
	 *    
	 *    - [b|c].{2} : b또는 c로 시작하는 세자리 문자열. {}안에 있는 숫자는 뒤에 오는 문자의 개수를 의미한다.
	 *    
	 * ===================================================  
	 *  
	 *  4. Escape-Sequence
	 *   백슬래시( \ ) 뒤에 한 문자나 숫자 조합이 오는 문자 조합을 "이스케이프 시퀀스"라고 합니다.
	 *   줄 바꿈 문자, 작은따옴표, 또는 문자 상수의 다른 특정 문자를 나타내려면 이스케이프 시퀀스를 사용해야 합니다.
	 *   (https://docs.microsoft.com/ko-kr/cpp/c-language/escape-sequences?view=msvc-160)
	 *   
	 *    - \n : 개행(줄바꿈)
	 *    - \\ : 백슬래시 '\'
	 *    - \' : 홑따옴표
	 *    - \" : 쌍따옴표
	 *    - \t : 탭문자
	 *    - 그 외
	 *  
	 * ===================================================  
	 *  
	 */


class Main1 {

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		
		String str = scanner.nextLine().trim(); // 문자열을 라인단위로 입력받아 저장 후 양 끝의 공백을 제거
		scanner.close();
		
		int count = getNumberOfWord(str); // 문자열에서 공백으로 구분한 단어의 개수
		System.out.println(count);
	}

	private static int getNumberOfWord(String str) {
		if ("".equals(str)) return 0; // 공백을 입력했을 경우 0 반환
		
		String splitPattern = " +"; // 1개 이상의 공백문자 " "로 구분하는 정규식
		
		String[] strSplit = str.split(splitPattern);  // 정규식에 따라 문자열 분할
		int count = strSplit.length; // 배열의 크기 = 단어의 갯수
		return count;
	}

}
